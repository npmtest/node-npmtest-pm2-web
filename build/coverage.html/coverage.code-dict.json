{"/home/travis/build/npmtest/node-npmtest-pm2-web/test.js":"/* istanbul instrument in package npmtest_pm2_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-web/lib.npmtest_pm2_web.js":"/* istanbul instrument in package npmtest_pm2_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pm2_web = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pm2_web = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-web/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pm2-web && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pm2_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pm2_web\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pm2_web.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_pm2_web.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pm2_web.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_pm2_web.__dirname +\n                    '/lib.npmtest_pm2_web.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/pm2-web.js":"\nvar PM2Web = require(__dirname + \"/server/app\");\n\nvar pm2web = new PM2Web({});\npm2web.start();\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/app.js":"var winston = require(\"winston\"),\n\tContainer = require(\"wantsit\").Container\n\tExpress = require(\"express\"),\n\thttp = require(\"http\"),\n\thttps = require(\"https\"),\n\tpath = require(\"path\"),\n\tWebSocketServer = require(\"ws\").Server,\n\tEventEmitter = require(\"wildemitter\"),\n\tutil = require(\"util\"),\n\tfs = require(\"fs\"),\n\tmethodOverride = require('method-override');\n\nvar REQUIRED_PM2_VERSION = \"0.11.0\";\n\nPM2Web = function(options) {\n\tEventEmitter.call(this);\n\n\t// create container\n\tthis._container = new Container();\n\n\t// set up logging\n\tthis._container.createAndRegister(\"logger\", winston.Logger, {\n\t\ttransports: [\n\t\t\tnew (winston.transports.Console)({\n\t\t\t\ttimestamp: true,\n\t\t\t\tcolorize: true\n\t\t\t})\n\t\t]\n\t});\n\n\t// non-optional options\n\toptions = options || {};\n\toptions.requiredPm2Version = REQUIRED_PM2_VERSION;\n\n\t// parse configuration\n\tthis._container.createAndRegister(\"config\", require(__dirname + \"/components/Configuration\"), options);\n\n\t// web controllers\n\tthis._container.createAndRegister(\"homeController\", require(__dirname + \"/routes/Home\"));\n\n\t// listens for events\n\tthis._container.register(\"pm2InterfaceFactory\", require(\"pm2-interface\"));\n\tthis._container.createAndRegister(\"pm2Listener\", require(__dirname + \"/components/PM2Listener\"));\n\n\t// create express\n\tthis._express = this._createExpress();\n\n\t// http(s) server\n\tthis._server = this._createServer(this._express);\n\n\t// web sockets\n\tthis._container.createAndRegister(\"webSocketResponder\", require(__dirname + \"/components/WebSocketResponder\"));\n \tthis._container.createAndRegister(\"webSocketServer\", WebSocketServer, {\n\t\tserver: this._server,\n\t\tpath: \"/ws\"\n\t});\n\n\t// holds host data\n\tthis._container.createAndRegister(\"hostList\", require(__dirname + \"/components/ServerHostList\"));\n\n\t// make errors a little more descriptive\n\tprocess.on(\"uncaughtException\", function (exception) {\n\t\tthis._container.find(\"logger\").error(\"PM2\", \"Uncaught exception\", exception && exception.stack ? exception.stack : \"No stack trace available\");\n\n\t\tthrow exception;\n\t}.bind(this));\n\n\t// make sure we shut down cleanly\n\tprocess.on(\"SIGINT\", this.stop.bind(this));\n\n\t// make sure we shut down cleanly\n\tprocess.on(\"message\", function(message) {\n\t\tif (message == \"shutdown\") {\n\t\t\tthis.stop();\n\t\t}\n\t});\n\n\t// make sure we shut down cleanly\n\tprocess.on(\"exit\", this.stop.bind(this));\n};\nutil.inherits(PM2Web, EventEmitter);\n\nPM2Web.prototype._route = function(express, controller, url, method) {\n\tvar component = this._container.find(controller);\n\n\texpress[method](url, component[method].bind(component));\n};\n\nPM2Web.prototype._createServer = function(express) {\n\tvar config = this._container.find(\"config\");\n\n\tif(config.get(\"www:ssl:enabled\")) {\n\t\tif(config.get(\"www:ssl:upgrade\")) {\n\t\t\t// create an app that will redirect all requests to the https version\n\t\t\tvar httpsUrl = \"https://\" + config.get(\"www:host\");\n\n\t\t\tif(config.get(\"www:ssl:port\") != 443) {\n\t\t\t\thttpsUrl += \":\" + config.get(\"www:ssl:port\");\n\t\t\t}\n\n\t\t\tvar redirectApp = Express();\n\t\t\tredirectApp.get(\"*\",function(request, response){\n\t\t\t\tresponse.redirect(httpsUrl + request.url);\n\t\t\t});\n\t\t\tprocess.nextTick(function() {\n\t\t\t\tthis._redirectServer = http.createServer(redirectApp);\n\t\t\t\tthis._redirectServer.listen(config.get(\"www:port\"), function() {\n\t\t\t\t\tthis._container.find(\"logger\").info(\"PM2Web\", \"HTTP to HTTPS upgrade server listening on port \" + this._redirectServer.address().port);\n\t\t\t\t}.bind(this));\n\t\t\t}.bind(this));\n\t\t}\n\n\t\treturn https.createServer({\n\t\t\tpassphrase: config.get(\"www:ssl:passphrase\"),\n\t\t\tkey: fs.readFileSync(config.get(\"www:ssl:key\")),\n\t\t\tcert: fs.readFileSync(config.get(\"www:ssl:certificate\"))\n\t\t}, this._express);\n\t}\n\n\treturn http.createServer(express);\n}\n\nPM2Web.prototype._createExpress = function() {\n\tvar config = this._container.find(\"config\");\n\tvar port = config.get(\"www:port\");\n\n\tif(config.get(\"www:ssl:enabled\")) {\n\t\tport = config.get(\"www:ssl:port\");\n\t}\n\n\tvar express = Express();\n\texpress.set(\"port\", port);\n\texpress.set(\"view engine\", \"jade\");\n\texpress.set(\"views\", __dirname + \"/views\");\n\n\t// create routes\n\tthis._route(express, \"homeController\", \"/\", \"get\");\n\tthis._route(express, \"homeController\", \"/hosts/:host\", \"get\");\n\n\tif(config.get(\"www:authentication:enabled\")) {\n\t\texpress.use(Express.basicAuth(config.get(\"www:authentication:username\"), config.get(\"www:authentication:password\")));\n\t}\n\n\texpress.use(Express.logger(\"dev\"));\n\texpress.use(Express.urlencoded())\n\texpress.use(Express.json())\n\texpress.use(methodOverride('X-HTTP-Method'));          // Microsoft\n\texpress.use(methodOverride('X-HTTP-Method-Override')); // Google/GData, default option\n\texpress.use(methodOverride('X-Method-Override'));      // IBM\n\texpress.use(express.router);\n\texpress.use(Express.static(__dirname + \"/public\"));\n\n\t// development only\n\texpress.use(Express.errorHandler());\n\n\treturn express;\n}\n\nPM2Web.prototype.setAddress = function(address) {\n\tthis._address = address;\n};\n\nPM2Web.prototype.getAddress = function() {\n\treturn this._address;\n};\n\nPM2Web.prototype.start = function() {\n\tvar config = this._container.find(\"config\");\n\n\tprocess.nextTick(function() {\n\t\tthis._server.listen(this._express.get(\"port\"), config.get(\"www:address\"), function() {\n\t\t\tthis._container.find(\"logger\").info(\"Express server listening on \" + this._server.address().address + \":\" + this._server.address().port);\n\n\t\t\tthis.setAddress(\"http\" + (config.get(\"www:ssl:enabled\") ? \"s\": \"\") + \"://\" + config.get(\"www:host\") + \":\" + this._server.address().port);\n\n\t\t\tthis.emit(\"start\");\n\t\t}.bind(this));\n\n\t\tif(config.get(\"mdns:enabled\")) {\n\t\t\ttry {\n\t\t\t\tvar mdns = require(\"mdns2\");\n\n\t\t\t\tthis._container.find(\"logger\").info(\"Starting MDNS adverisment with name\", this._container.find(\"config\").get(\"mdns:name\"));\n\n\t\t\t\t// publish via Bonjour\n\t\t\t\tthis._advert = mdns.createAdvertisement(mdns.tcp(\"http\"), this._express.get(\"port\"), {\n\t\t\t\t\tname: config.get(\"mdns:name\")\n\t\t\t\t});\n\t\t\t\tthis._advert.start();\n\t\t\t} catch(e) {\n\t\t\t\tthis._container.find(\"logger\").warn(\"Could not start mdns argument - did mdns2 install correctly?\", e.message);\n\t\t\t}\n\t\t}\n\t}.bind(this));\n};\n\nPM2Web.prototype.stop = function() {\n\tvar logger = this._container.find(\"logger\");\n\tlogger = console;\n\n\tlogger.info(\"PM2Web\", \"Shutting down Express\");\n\tthis._server.close(function() {\n\t\tlogger.info(\"PM2Web\", \"Express shut down.\");\n\t});\n\n\tlogger.info(\"PM2Web\", \"Shutting WebSocket\");\n\tthis._container.find(\"webSocketServer\").close();\n\n\tlogger.info(\"PM2Web\", \"Disconnecting from pm2-interface\");\n\tthis._container.find(\"pm2Listener\").close();\n\n\tif(this._advert) {\n\t\tlogger.info(\"PM2Web\", \"Shutting down MDNS Advert\");\n\t\tthis._advert.stop();\n\t}\n\n\tif(this._redirectServer) {\n\t\tlogger.info(\"PM2Web\", \"Shutting down HTTP to HTTPS upgrade server\");\n\t\tthis._redirectServer.close(function() {\n\t\t\tlogger.info(\"PM2Web\", \"HTTP to HTTPS upgrade server shut down.\");\n\t\t});\n\t}\n};\n\nmodule.exports = PM2Web;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/components/Configuration.js":"var Autowire = require(\"wantsit\").Autowire,\n\tcjson = require(\"cjson\"),\n\tfs = require(\"fs\"),\n  argv = require(\"minimist\")(process.argv.slice(2)),\n\tpwuid = require('pwuid');\n\nvar DEFAULT_CONFIG_FILE = __dirname + \"/../../config.json\";\nvar GLOBAL_CONFIG_FILE = \"/etc/pm2-web/config.json\";\nvar USER_CONFIG_FILE = process.env[\"HOME\"] + \"/.config/pm2-web/config.json\";\n\nvar Configuration = function(options) {\n\tthis._logger = Autowire;\n\n\t// load defaults from bundled config file\n\tthis._config = cjson.load(DEFAULT_CONFIG_FILE);\n\n\t// override defaults with config file\n\tthis._override(this._loadConfigFile(), this._config);\n\n\t// remove extra bits from command line arguments\n\tif(argv) {\n\t\tdelete argv._;\n\t\tdelete argv.$0;\n\n\t\t// respect arguments passed on the command line\n\t\tvar commandLine = {};\n\n\t\tObject.keys(argv).forEach(function(key) {\n\t\t\tthis._apply(key, argv[key], commandLine);\n\t\t}.bind(this));\n\n\t\t// override config file with command line\n\t\tthis._override(commandLine, this._config);\n\t}\n\n\t// override everything with passed arguments\n\tthis._override(options || {}, this._config);\n\n\tthis._normaliseHosts();\n}\n\nConfiguration.prototype.afterPropertiesSet = function() {\n\t// need to rethink this\n\tif(argv[\"config\"]) {\n\t\tthis._logger.info(\"Configuration\", \"Loading config file from\", argv[\"config\"]);\n\t} else if (fs.existsSync(USER_CONFIG_FILE)) {\n\t\tthis._logger.info(\"Configuration\", \"Loading config file from\", USER_CONFIG_FILE);\n\t} else if (fs.existsSync(GLOBAL_CONFIG_FILE)) {\n\t\tthis._logger.info(\"Configuration\", \"Loading config file from\", GLOBAL_CONFIG_FILE);\n\t}\n\n\t// do not print passwords in the logs...\n\tvar config = JSON.parse(JSON.stringify(this._config));\n\tconfig.www.authentication.password = \"**** LA LA LA, NOTHING TO SEE HERE ****\";\n\tconfig.www.ssl.passphrase = \"**** LA LA LA, NOTHING TO SEE HERE ****\";\n\n\tthis._logger.info(\"Configuration\", \"Loaded default configuration from\", DEFAULT_CONFIG_FILE);\n\tthis._logger.info(\"Configuration\", \"Final configuration:\", JSON.stringify(config, null, 2));\n}\n\nConfiguration.prototype._loadConfigFile = function() {\n\t// try to find a config file\n\tif(argv[\"config\"]) {\n\t\t// if a config file has been specified make it override all settings\n\t\t//this._logger.info(\"Loading config file from\", this.get(\"config\"));\n\t\treturn cjson.load(argv[\"config\"]);\n\t} else if (fs.existsSync(USER_CONFIG_FILE)) {\n\t\t// otherwise if a user specific config file is present, make that override all settings\n\t\t//this._logger.info(\"Loading config file from\", USER_CONFIG_FILE);\n\t\treturn cjson.load(USER_CONFIG_FILE);\n\t} else if (fs.existsSync(GLOBAL_CONFIG_FILE)) {\n\t\t// otherwise if a global config file is present, make that override all settings\n\t\t//this._logger.info(\"Loading config file from\", GLOBAL_CONFIG_FILE);\n\t\treturn cjson.load(GLOBAL_CONFIG_FILE);\n\t}\n\n\treturn {};\n}\n\nConfiguration.prototype._normaliseHosts = function() {\n\tvar args = this.get(\"pm2\");\n\n\tif(!args) {\n\t\targs = [];\n\t}\n\n\t// command line arguments arrive like:\n\t// --pm2:host=foo --pm2:rpc=6666 --pm2:host=bar\n\t// {host: [\"foo\", \"bar\"], rpc: 6666}\n\tif(Array.isArray(args.host)) {\n\t\tvar hosts = [];\n\n\t\targs.rpc = this._arrayify(args.rpc);\n\t\targs.events = this._arrayify(args.events);\n\t\targs.inspector = this._arrayify(args.inspector);\n\n\t\targs.host.forEach(function(host, index) {\n\t\t\thosts.push(this._defaults({\n\t\t\t\t\"host\": host,\n\t\t\t\t\"rpc\": args.rpc[index] ? args.rpc[index] : undefined,\n\t\t\t\t\"events\": args.events[index] ? args.events[index] : undefined,\n\t\t\t\t\"inspector\": args.inspector[index] ? args.inspector[index] : undefined\n\t\t\t}, {\n\t\t\t\t\"host\": \"localhost\",\n\t\t\t\t\"rpc\": \"~/.pm2/rpc.sock\",\n\t\t\t\t\"events\": \"~/.pm2/pub.sock\"\n\t\t\t}));\n\t\t}.bind(this));\n\n\t\targs = hosts;\n\t}\n\n\tif(!Array.isArray(args) && typeof args == \"object\") {\n\t\targs = [args];\n\t}\n\n\tvar userDetails = pwuid()\n\n\t// ensure data is correct for each host\n\targs.forEach(function(host) {\n\t\thost.host = host.host || \"localhost\";\n\t\thost.rpc = host.rpc || \"~/.pm2/rpc.sock\";\n\t\thost.events = host.events || \"~/.pm2/pub.sock\";\n\n\t\tif(host.rpc.substring(0, 1) == \"~\") {\n\t\t\thost.rpc = userDetails.dir + host.rpc.substring(1)\n\t\t}\n\n\t\tif(host.events.substring(0, 1) == \"~\") {\n\t\t\thost.events = userDetails.dir + host.events.substring(1)\n\t\t}\n\n\t\tif(host.inspector === undefined) {\n\t\t\tdelete host.inspector;\n\t\t}\n\t});\n\n\tthis.set(\"pm2\", args);\n}\n\nConfiguration.prototype._arrayify = function(arg) {\n\tif(!arg) {\n\t\treturn [];\n\t}\n\n\tif(Array.isArray(arg)) {\n\t\treturn arg;\n\t}\n\n\treturn [arg];\n}\n\nConfiguration.prototype.get = function(key) {\n\tif(!this._config || !key) {\n\t\treturn null;\n\t}\n\n\tvar value = this._config;\n\n\tkey.split(\":\").forEach(function(property) {\n\t\tif(value && typeof(value[property]) != \"undefined\") {\n\t\t\tvalue = value[property];\n\t\t} else {\n\t\t\tvalue = null;\n\t\t}\n\t});\n\n\treturn value;\n}\n\nConfiguration.prototype.set = function(key, value) {\n\tif(!this._config || !key) {\n\t\treturn;\n\t}\n\n\tthis._apply(key, value, this._config);\n}\n\nConfiguration.prototype._apply = function(key, value, target) {\n\tvar parts;\n\n\tif(key.indexOf(\":\") != -1) {\n\t\tparts = key.split(\":\");\n\t} else {\n\t\tparts = key.split(\".\");\n\t}\n\n\tparts.forEach(function(property, index) {\n\t\tif((parts.length - 1) == index) {\n\t\t\ttarget[property] = value;\n\t\t} else {\n\t\t\tif(!target[property]) {\n\t\t\t\ttarget[property] = {};\n\t\t\t}\n\n\t\t\ttarget = target[property];\n\t\t}\n\t});\n}\n\nConfiguration.prototype._defaults = function(object, defaults) {\n\tif(typeof object == \"undefined\" || object == null) {\n\t\treturn defaults;\n\t}\n\n\tif(typeof defaults == \"string\" || defaults instanceof String) {\n\t\treturn object ? object : defaults;\n\t}\n\n\tif(typeof defaults == \"boolean\") {\n\t\treturn object ? true : false;\n\t}\n\n\tif(!isNaN(parseFloat(defaults)) && isFinite(defaults)) {\n\t\treturn typeof object == \"undefined\" ? defaults : object;\n\t}\n\n\tif(Array.isArray(defaults)) {\n\t\tvar output = [];\n\n\t\tobject.forEach(function(entry, index) {\n\t\t\toutput.push(this._defaults(entry, defaults[index] ? defaults[index] : defaults[0]));\n\t\t}.bind(this));\n\n\t\treturn output;\n\t}\n\n\tif(typeof defaults == \"object\") {\n\t\tvar output = {};\n\n\t\tObject.keys(defaults).forEach(function(key) {\n\t\t\toutput[key] = this._defaults(object[key], defaults[key]);\n\t\t}.bind(this));\n\n\t\treturn output;\n\t}\n\n\tthis._logger.error(\"Configuration\", \"Don't know what to do with\", object, \"expected\", defaults);\n}\n\nConfiguration.prototype._override = function(source, target) {\n\tObject.keys(source).forEach(function(key) {\n\t\tif(typeof source[key] == \"string\" || source[key] instanceof String ||\n\t\t\ttypeof source[key] == \"boolean\" ||\n\t\t\t(!isNaN(parseFloat(source[key])) && isFinite(source[key]))) {\n\t\t\ttarget[key] = source[key];\n\t\t}\n\n\t\tif(Array.isArray(source[key])) {\n\t\t\ttarget[key] = source[key];\n\t\t} else if(Array.isArray(target[key])) {\n\t\t\ttarget[key] = [source[key]];\n\t\t}\n\n\t\tif(typeof source[key] == \"object\") {\n\t\t\tthis._override(source[key], target[key]);\n\t\t}\n\t}.bind(this));\n}\n\nmodule.exports = Configuration;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/routes/Home.js":"var Autowire = require(\"wantsit\").Autowire;\n\tpkg = require(__dirname + \"/../../package.json\");\n\nvar HomeController = function() {\n\tthis._config = Autowire;\n};\n\nHomeController.prototype.get = function(request, response){\n\tresponse.render(\"index\", {\n\t\tversion: pkg.version\n\t});\n};\n\nmodule.exports = HomeController;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/components/PM2Listener.js":"var Autowire = require(\"wantsit\").Autowire,\n\tEventEmitter = require(\"wildemitter\"),\n\tutil = require(\"util\"),\n\tsemver = require(\"semver\"),\n\tpkg = require(__dirname + \"/../../package.json\");\n\nvar DEFAULT_DEBUG_PORT = 5858;\n\nvar PM2Listener = function() {\n\tEventEmitter.call(this);\n\n\tthis._config = Autowire;\n\tthis._logger = Autowire;\n\tthis._pm2InterfaceFactory = Autowire;\n\n\tthis._pm2List = {};\n}\nutil.inherits(PM2Listener, EventEmitter);\n\nPM2Listener.prototype.afterPropertiesSet = function() {\n\tthis._config.get(\"pm2\").forEach(function(pm2Details) {\n\t\tthis._connect(pm2Details);\n\t}.bind(this));\n}\n\nPM2Listener.prototype.close = function() {\n\tObject.keys(this._pm2List).forEach(function(key) {\n\t\tthis._pm2List[key].disconnect();\n\t}.bind(this));\n}\n\nPM2Listener.prototype._connect = function(pm2Details) {\n\tthis._logger.debug(\"PM2Listener\", \"Connecting to\", pm2Details.host, \"RPC port\", pm2Details.rpc, \"Event port\", pm2Details.events);\n\n\tvar remote = this._pm2InterfaceFactory({\n\t\tsub_port: pm2Details.events,\n\t\trpc_port: pm2Details.rpc,\n\t\tbind_host: pm2Details.host\n\t});\n\n\tremote.on(\"ready\", this._pm2RPCSocketReady.bind(this, remote, pm2Details));\n\tremote.on(\"closed\", this._pm2RPCSocketClosed.bind(this, remote));\n\tremote.on(\"close\", this._pm2EventSocketClosed.bind(this, remote));\n\tremote.on(\"reconnecting\", this._pm2EventSocketReconnecting.bind(this, remote));\n}\n\nPM2Listener.prototype._pm2RPCSocketReady = function(pm2Interface, pm2Details) {\n\tif(this._pm2List[pm2Interface.bind_host]) {\n\t\treturn;\n\t}\n\n\tthis._logger.info(\"PM2Listener\", pm2Interface.bind_host, \"RPC socket ready\");\n\n\tif(!pm2Interface.rpc.getVersion) {\n\t\tpm2Interface.pm2 = {\n\t\t\tversion: \"OBSOLETE\",\n\t\t\tcompatible: false\n\t\t};\n\n\t\treturn this._addIncompatiblePm2(pm2Interface, pm2Interface.pm2.version, pm2Details);\n\t}\n\n\tthis._logger.info(\"PM2Listener\", \"Querying version number from\", pm2Interface.bind_host);\n\n\tpm2Interface.rpc.getVersion({}, function(err, version) {\n\t\tpm2Interface.pm2 = {\n\t\t\tversion: version,\n      compatible: true\n\t\t};\n\n\t\tif(!semver.gte(version, this._config.get(\"requiredPm2Version\"))) {\n\t\t\tpm2Interface.pm2.compatible = false;\n\n\t\t\treturn this._addIncompatiblePm2(pm2Interface);\n\t\t}\n\n\t\tthis._addCompatiblePm2(pm2Interface, version, pm2Details);\n\t}.bind(this));\n}\n\nPM2Listener.prototype._addIncompatiblePm2 = function(pm2Interface, version) {\n\tif(version) {\n\t\tthis._logger.error(\"PM2Listener\", pm2Interface.bind_host, \"is running pm2\", version, \"which is incompatible with pm2-web\", pkg.version, \"- please upgrade pm2 to\", this._config.get(\"requiredPm2Version\"), \"or higher.\");\n\t} else {\n\t\tthis._logger.error(\"PM2Listener\", \"The version of pm2 running on\", pm2Interface.bind_host, \"is incompatible with pm2-web\", pkg.version, \"- please upgrade pm2 to\", this._config.get(\"requiredPm2Version\"), \"or higher.\");\n\t}\n\n\tthis._pm2List[pm2Interface.bind_host] = pm2Interface;\n\n  this.emit(\"systemData\", {\n    name: pm2Interface.bind_host,\n    pm2: pm2Interface.pm2,\n    system: {\n      hostname: pm2Interface.bind_host,\n      load: [],\n      memory: {\n        free: 0,\n        total: 0\n      }\n    },\n    pm2: pm2Interface.pm2,\n    processes: []\n  });\n}\n\nPM2Listener.prototype._addCompatiblePm2 = function(pm2Interface, version, pm2Details) {\n\tthis._logger.info(\"PM2Listener\", pm2Interface.bind_host, \"is running pm2\", version);\n\n\t// listen for all events\n\tpm2Interface.bus.on(\"*\", function(event, data) {\n\t\tdata.name = pm2Interface.bind_host;\n\t\tthis.emit(event, data);\n\t}.bind(this));\n\n\tvar getSystemData = function() {\n\t\tpm2Interface.rpc.getSystemData({}, function(error, data) {\n\t\t\tif(error) {\n\t\t\t\tthis._logger.warn(\"PM2Listener\", \"Error retrieving system data\", error.message);\n\t\t\t} else {\n\t\t\t\t// only expose fields we are interested in\n\t\t\t\tvar systemData = this._mapSystemData(pm2Interface, data, pm2Details);\n\n\t\t\t\tthis.emit(\"systemData\", systemData);\n\t\t\t}\n\n\t\t\tsetTimeout(getSystemData, this._config.get(\"updateFrequency\"));\n\t\t}.bind(this));\n\t}.bind(this);\n\tgetSystemData();\n\n\tthis._pm2List[pm2Interface.bind_host] = pm2Interface;\n}\n\nPM2Listener.prototype._mapSystemData = function(pm2Interface, data, pm2Details) {\n\t// support for pm2 < 0.7.2\n\tif(!data.system.time) {\n\t\tdata.system.time = Date.now();\n\t}\n\n\tvar systemData = {\n\t\tname: pm2Interface.bind_host,\n\t\tinspector: pm2Details.inspector,\n\t\tsystem: {\n\t\t\thostname: data.system.hostname,\n\t\t\tcpu_count: data.system.cpus.length,\n\t\t\tload: [\n\t\t\t\tdata.system.load[0],\n\t\t\t\tdata.system.load[1],\n\t\t\t\tdata.system.load[2]\n\t\t\t],\n\t\t\tuptime: data.system.uptime,\n\t\t\tmemory: {\n\t\t\t\tfree: data.system.memory.free,\n\t\t\t\ttotal: data.system.memory.total\n\t\t\t},\n\t\t\ttime: data.system.time\n\t\t},\n\t\tpm2: pm2Interface.pm2,\n\t\tprocesses: []\n\t};\n\n\tvar reloading = [];\n\n\tdata.processes.forEach(function(process) {\n\t\tif((typeof process.pm_id == \"string\" || process.pm_id instanceof String) && process.pm_id.substring(0, 8) == \"todelete\") {\n\t\t\t// process has been reloaded - this is the old process that will be killed\n\t\t\t// so record that it's reloading but do not create a duplicate process for it.\n\t\t\treloading.push(parseInt(process.pm_id.substring(8), 10));\n\n\t\t\treturn;\n\t\t}\n\n\t\tif(process.pm2_env.status != \"online\" && process.pm2_env.status != \"stopped\" && process.pm2_env.status != \"errored\" && process.pm2_env.status != \"launching\" && process.pm2_env.status != \"stopping\") {\n\t\t\tthis._logger.warn(\"Unknown status!\", process.pm2_env.status);\n\t\t}\n\n\t\tsystemData.processes.push({\n\t\t\tid: process.pm_id,\n\t\t\tpid: process.pid,\n\t\t\tname: process.pm2_env.name,\n\t\t\tscript: process.pm2_env.pm_exec_path,\n\t\t\tuptime: (data.system.time - process.pm2_env.pm_uptime) / 1000,\n\t\t\trestarts: process.pm2_env.restart_time,\n\t\t\tstatus: process.pm2_env.status,\n\t\t\tmemory: process.monit.memory,\n\t\t\tcpu: process.monit.cpu,\n      mode: process.pm2_env.exec_mode.substring(0, process.pm2_env.exec_mode.indexOf(\"_\")),\n\t\t\tdebugPort: this._findDebugPort(process.pm2_env.nodeArgs)\n\t\t});\n\t}.bind(this));\n\n\t// mark processes that are reloading as such\n\tsystemData.processes.forEach(function(process) {\n\t\tprocess.reloading = reloading.indexOf(process.id) != -1;\n\t});\n\n\treturn systemData;\n}\n\nPM2Listener.prototype._pm2RPCSocketClosed = function(pm2Interface) {\n\tthis._logger.info(\"PM2Listener\", pm2Interface.bind_host, \"RPC socket closed\");\n\n\tdelete this._pm2List[pm2Interface.bind_host];\n}\n\nPM2Listener.prototype._pm2EventSocketClosed = function(pm2Interface) {\n\tthis._logger.info(\"PM2Listener\", pm2Interface.bind_host, \"event socket close\");\n}\n\nPM2Listener.prototype._pm2EventSocketReconnecting = function(pm2Interface) {\n\tthis._logger.info(\"PM2Listener\", pm2Interface.bind_host, \"event socket reconnecting\");\n}\n\nPM2Listener.prototype.stopProcess = function(host, pm_id) {\n\tthis._doByProcessId(host, pm_id, \"stopProcessId\");\n}\n\nPM2Listener.prototype.startProcess = function(host, pm_id) {\n\tthis._doByProcessId(host, pm_id, \"startProcessId\");\n}\n\nPM2Listener.prototype.restartProcess = function(host, pm_id) {\n\tthis._doByProcessId(host, pm_id, \"restartProcessId\");\n}\n\nPM2Listener.prototype.reloadProcess = function(host, pm_id) {\n\tif(this._config.get(\"forceHardReload\")) {\n\t\tthis._doByProcessId(host, pm_id, \"reloadProcessId\");\n\t} else {\n\t\tthis._doByProcessId(host, pm_id, \"softReloadProcessId\");\n\t}\n}\n\nPM2Listener.prototype.debugProcess = function(host, pm_id) {\n\t// put the remot process into debug mode\n\tthis._pm2List[host].rpc.sendSignalToProcessId({\n\t\tprocess_id: pm_id,\n\t\tsignal: \"SIGUSR1\"\n\t}, function(error) {\n\n\t});\n};\n\nPM2Listener.prototype._doByProcessId = function(host, pm_id, action) {\n\tif(!this._pm2List[host]) {\n\t\treturn this._logger.info(\"PM2Listener\", \"Invalid host\", host, \"not in\", Object.keys(this._pm2List));\n\t}\n\n\tthis._logger.info(\"PM2Listener\", host, pm_id, action);\n\tthis._pm2List[host].rpc[action](pm_id, function(error) {\n\n\t});\n}\n\nPM2Listener.prototype._findDebugPort = function(execArgv) {\n\tvar port = DEFAULT_DEBUG_PORT;\n\n\tif(Array.isArray(execArgv)) {\n\t\texecArgv.forEach(function(argument) {\n\t\t\t[/--debug\\s*=?\\s*([0-9]+)/, /--debug-brk\\s*=?\\s*([0-9]+)/].forEach(function(regex) {\n\t\t\t\tvar matches = argument.match(regex);\n\n\t\t\t\tif(matches && matches.length > 1) {\n\t\t\t\t\tport = parseInt(matches[1], 10);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\treturn port;\n}\n\nmodule.exports = PM2Listener;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/components/WebSocketResponder.js":"var Autowire = require(\"wantsit\").Autowire,\n\t_s = require(\"underscore.string\");\n\nvar WebSocketResponder = function() {\n\tthis._config = Autowire;\n\n\tthis._logger = Autowire;\n\tthis._pm2Listener = Autowire;\n\tthis._webSocketServer = Autowire;\n\tthis._hostList = Autowire;\n\tthis._events = [];\n}\n\nWebSocketResponder.prototype.afterPropertiesSet = function() {\n\tvar logger = this._logger;\n\n\tthis._webSocketServer.broadcast = function(data) {\n\t\tvar message = JSON.stringify(data);\n\n\t\tthis.clients.forEach(function(client) {\n\t\t\ttry {\n\t\t\t\tclient.send(message);\n\t\t\t} catch(e) {\n\t\t\t\tlogger.warn(\"WebSocketResponder\", \"Error broadcasing to client\", e.message);\n\t\t\t}\n\t\t}.bind(this));\n\t};\n\tthis._webSocketServer.on(\"connection\", function(client) {\n\t\tclient.on(\"message\", function(message) {\n\t\t\tvar request = JSON.parse(message);\n\n\t\t\tif(request.method && request.args && this[request.method]) {\n\t\t\t\trequest.args.unshift(client);\n\n\t\t\t\tthis[request.method].apply(this, request.args);\n\t\t\t}\n\t\t}.bind(this));\n\n\t\t// send config and all host data\n\t\tclient.send(JSON.stringify([{\n\t\t\t\tmethod: \"onConfig\",\n\t\t\t\targs: [{\n\t\t\t\t\tgraph: this._config.get(\"graph\"),\n\t\t\t\t\tlogs: this._config.get(\"logs\"),\n\t\t\t\t\tupdateFrequency: this._config.get(\"updateFrequency\"),\n\t\t\t\t\trequiredPm2Version: this._config.get(\"requiredPm2Version\")\n\t\t\t\t}]\n\t\t\t}, {\n\t\t\t\tmethod: \"onHosts\",\n\t\t\t\targs: [\n\t\t\t\t\tthis._hostList.getHosts()\n\t\t\t\t]\n\t\t\t}\n\t\t]));\n\t}.bind(this));\n\n\t// broadcast error logging\n\tthis._pm2Listener.on(\"log:err\", this._broadcastLog.bind(this, \"error\"));\n\n\t// broadcast info logging\n\tthis._pm2Listener.on(\"log:out\", this._broadcastLog.bind(this, \"info\"));\n\n\t// broadcast exceptions\n\tthis._pm2Listener.on(\"process:exception\", function(event) {\n\t\tvar data = event.data ? event.data : event.err\n\t\tvar host, id, message, stack;\n\n\t\thost = event.name\n\n\t\tif(event.process) {\n\t\t\tid = event.process.pm_id;\n\t\t}\n\n\t\tmessage = data.message;\n\t\tstack = data.stack;\n\n\t\tif(!id) {\n\t\t\treturn\n\t\t}\n\n\t\tthis._hostList.addLog(host, id, \"error\", stack);\n\n\t\tthis._events.push({\n\t\t\tmethod: \"onProcessException\",\n\t\t\targs: [\n\t\t\t\thost, id, message, stack\n\t\t\t]\n\t\t});\n\t}.bind(this));\n\n\t// broadcast system data updates\n\tthis._pm2Listener.on(\"systemData\", function(data) {\n\t\tthis._events.push({\n\t\t\tmethod: \"onSystemData\",\n\t\t\targs: [\n\t\t\t\tdata\n\t\t\t]\n\t\t});\n\t}.bind(this));\n\n\tsetInterval(this._processEvents.bind(this), this._config.get(\"ws:frequency\"));\n};\n\nWebSocketResponder.prototype._processEvents = function() {\n\tif(this._events.length == 0) {\n\t\treturn;\n\t}\n\n\tthis._webSocketServer.broadcast(this._events);\n\n\tthis._events.length = 0;\n}\n\nWebSocketResponder.prototype._broadcastLog = function(type, event) {\n\tvar id = event.process.pm_id;\n\tvar log;\n\n\t// ugh\n\tif(event.data) {\n\t\tif(event.data.str) {\n\t\t\tlog = event.data.str\n\t\t} else if(Array.isArray(event.data)) {\n\t\t\tlog = new Buffer(event.data).toString('utf8');\n\t\t} else {\n\t\t\tlog = event.data.toString()\n\t\t}\n\t} else if(event.str) {\n\t\tlog = event.str;\n\t}\n\n\tif(!log) {\n\t\treturn;\n\t}\n\n\tif(log.trim) {\n\t\tlog = log.trim()\n\t}\n\n\tthis._hostList.addLog(event.name, id, type, log);\n\n\tthis._events.push({\n\t\tmethod: \"on\" + _s.capitalize(type) + \"Log\",\n\t\targs: [\n\t\t\tevent.name, id, log\n\t\t]\n\t});\n};\n\nWebSocketResponder.prototype.startProcess = function(client, host, pm_id) {\n\tthis._pm2Listener.startProcess(host, pm_id);\n};\n\nWebSocketResponder.prototype.stopProcess = function(client, host, pm_id) {\n\tthis._pm2Listener.stopProcess(host, pm_id);\n};\n\nWebSocketResponder.prototype.restartProcess = function(client, host, pm_id) {\n\tthis._pm2Listener.restartProcess(host, pm_id);\n};\n\nWebSocketResponder.prototype.reloadProcess = function(client, host, pm_id) {\n\tthis._pm2Listener.reloadProcess(host, pm_id);\n};\n\nWebSocketResponder.prototype.debugProcess = function(client, host, pm_id) {\n\tthis._pm2Listener.debugProcess(host, pm_id);\n};\n\nmodule.exports = WebSocketResponder;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/server/components/ServerHostList.js":"var HostData = require(__dirname + \"/../../common/HostData\"),\n\tAutowire = require(\"wantsit\").Autowire;\n\nvar ServerHostList = function() {\n\tthis._pm2Listener = Autowire;\n\tthis._config = Autowire;\n\tthis._logger = Autowire;\n\n\tthis._hostData = {};\n}\n\nServerHostList.prototype.afterPropertiesSet = function() {\n\tthis._pm2Listener.on(\"systemData\", this._onSystemData.bind(this));\n\tthis._pm2Listener.on(\"pm2:kill\", function(data) {\n\t\tthis._logger.info(\"HostList\", data.name, \"was killed\");\n\t\tdelete this._hostData[data.name];\n\t}.bind(this));\n\n\tsetInterval(this._hostPurge.bind(this), this._config.get(\"hostPurge:frequency\"));\n};\n\nServerHostList.prototype._onSystemData = function(data) {\n\tif(!this._hostData[data.name]) {\n\t\tthis._hostData[data.name] = new HostData(data, this._config);\n\t}\n\n\tthis._hostData[data.name].update(data);\n};\n\nServerHostList.prototype._hostPurge = function() {\n\tvar now = Date.now();\n\n\tObject.keys(this._hostData).forEach(function(key) {\n\t\tif(now - this._hostData[key].lastUpdated > this._config.get(\"hostPurge:cutoff\")) {\n\t\t\tthis._logger.info(\"HostList\", key, \"has gone away\");\n\t\t\tdelete this._hostData[key];\n\t\t}\n\t}.bind(this));\n};\n\nServerHostList.prototype.getHosts = function() {\n\tvar output = [];\n\n\tObject.keys(this._hostData).forEach(function(key) {\n\t\toutput.push(this._hostData[key]);\n\t}.bind(this));\n\n\treturn output;\n};\n\nServerHostList.prototype.addLog = function(host, pm2_id, type, data) {\n\tvar host = this._hostData[host];\n\n\tif(!host) {\n\t\treturn;\n\t}\n\n\tvar process = host.findProcessById(pm2_id);\n\n\tif(!process) {\n\t\treturn;\n\t}\n\n\tprocess.log(type, data);\n}\n\nmodule.exports = ServerHostList;\n","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/common/HostData.js":"var ProcessData = require(\"./ProcessData\");\n\nvar HostData = function(data, config) {\n\tObject.defineProperty(this, \"_config\", {\n\t\tenumerable: false,\n\t\tvalue: config\n\t});\n\n\tthis.name = data.name;\n\tthis.inspector = data.inspector;\n\tthis.pm2 = data.pm2,\n\tthis.system = {};\n\tthis.processes = [];\n};\n\nHostData.prototype.update = function(data) {\n\tthis.lastUpdated = Date.now();\n\n\t[\"hostname\", \"cpu_count\", \"uptime\", \"time\"].forEach(function(key) {\n\t\tthis.system[key] = data.system[key]\n\t}.bind(this));\n\n\tthis.system.load = [\n\t\tdata.system.load[0],\n\t\tdata.system.load[1],\n\t\tdata.system.load[2]\n\t];\n\tthis.system.memory = {\n\t\tfree: data.system.memory.free,\n\t\ttotal: data.system.memory.total,\n\t\tused: data.system.memory.total - data.system.memory.free\n\t};\n\n\tthis._removeMissingProcesses(data.processes);\n\n\tdata.processes.forEach(function(reportedProcess) {\n\t\tvar existingProcess = this.findProcessById(reportedProcess.id);\n\n\t\tif(!existingProcess) {\n\t\t\texistingProcess = new ProcessData(this._config, reportedProcess);\n\t\t\tthis.processes.push(existingProcess);\n\t\t}\n\n\t\texistingProcess.update(reportedProcess, data.system);\n\t}.bind(this));\n};\n\nHostData.prototype._removeMissingProcesses = function(reportedProcesses) {\n\tthis.processes = this.processes.filter(function(existingProcess) {\n\t\tfor(var i = 0; i < reportedProcesses.length; i++) {\n\t\t\tif(reportedProcesses[i].name == existingProcess.name) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t});\n};\n\nHostData.prototype.findProcessById = function(id) {\n\tfor(var i = 0; i < this.processes.length; i++) {\n\t\tif(this.processes[i].id == id) {\n\t\t\treturn this.processes[i];\n\t\t}\n\t}\n\n\treturn null;\n}\n\nmodule.exports = HostData;","/home/travis/build/npmtest/node-npmtest-pm2-web/pm2-web/common/ProcessData.js":"var Moment = require(\"moment\");\n\nvar MILLISECONDS_IN_A_DAY = 86400000;\n\nvar ProcessData = function(config, data) {\n\tObject.defineProperty(this, \"_config\", {\n\t\tenumerable: false,\n\t\tvalue: config\n\t});\n\n\tthis.usage = {\n\t\tcpu: data.usage ? data.usage.cpu : [],\n\t\tmemory: data.usage ? data.usage.memory : []\n\t};\n\n\tthis.logs = [];\n\n\tif(Array.isArray(data.logs)) {\n\t\tdata.logs.forEach(function(log) {\n\t\t\tthis.log(log.type, log.data);\n\t\t}.bind(this));\n\t}\n\n\tthis._map(data);\n}\n\nProcessData.prototype.update = function(data, system) {\n\tthis._map(data);\n\n\tthis._append((data.memory / system.memory.total) * 100, data.cpu, system.time);\n}\n\nProcessData.prototype.log = function(type, data) {\n\tif(!type || !data) {\n\t\treturn;\n\t}\n\n\tthis.logs.push({\n\t\ttype: type,\n\t\tdata: data\n\t});\n\n\t// rotate logs if necessary\n\tif(this.logs.length > this._config.get(\"logs:max\")) {\n\t\tthis.logs.splice(0, this.logs.length - this._config.get(\"logs:max\"));\n\t}\n}\n\nProcessData.prototype._map = function(data) {\n\t[\"id\", \"pid\", \"name\", \"script\", \"uptime\", \"restarts\", \"status\", \"memory\", \"cpu\", \"reloading\", \"debugPort\", \"mode\"].forEach(function(key) {\n\t\tthis[key] = data[key];\n\t}.bind(this));\n}\n\nProcessData.prototype._append = function(memory, cpu, time) {\n\tthis.usage.memory = this._compressResourceUsage(this.usage.memory, time);\n\tthis.usage.cpu = this._compressResourceUsage(this.usage.cpu, time);\n\n\tthis._appendIfDifferent(this.usage.memory, memory, time);\n\tthis._appendIfDifferent(this.usage.cpu, cpu, time);\n}\n\nProcessData.prototype._appendIfDifferent = function(array, value, time) {\n\tvar rounded = ~~value;\n\n\t// if the last two datapoints have the same value as the one we're about to add,\n\t// don't add a third, just change the date of the last one to be now\n\t// x-----x becomes x-----------x instead of x-----x-----x\n\tif(array.length > 1 && array[array.length - 1].y == rounded && array[array.length - 2].y == rounded) {\n\t\tarray[array.length - 1].x = time;\n\n\t\treturn;\n\t}\n\n\tarray.push({\n\t\tx: time,\n\t\ty: rounded\n\t});\n}\n\nProcessData.prototype._compressResourceUsage = function(data, time) {\n\tvar datapoints = this._config.get(\"graph:datapoints\");\n\tdatapoints -= 1;\n\n\tvar distribution = this._config.get(\"graph:distribution\");\n\tvar maxAgeInDays = distribution.length * MILLISECONDS_IN_A_DAY;\n\n\tif(data.length < datapoints) {\n\t\treturn data;\n\t}\n\n\tvar now = time;\n\tvar cutoff = now - maxAgeInDays;\n\tvar usage = [];\n\n\tvar days = [];\n\tvar day = [];\n\n\t// group all data by day\n\tdata.forEach(function(datum) {\n\t\tif(datum.x < cutoff) {\n\t\t\t// ignore anything older than graph:maxAgeInDays\n\t\t\treturn;\n\t\t}\n\n\t\t// record date so we can easily compare days\n\t\tdatum.date = new Date(datum.x);\n\n\t\tif(day[day.length - 1] && day[day.length - 1].date.getDate() != datum.date.getDate()) {\n\t\t\tdays.push(day);\n\t\t\tday = [];\n\t\t} else {\n\t\t\tday.push(datum);\n\t\t}\n\t});\n\n\t// all datapoints were in one day..\n\tif(days.length == 0) {\n\t\tdays.push(day);\n\t}\n\n\t// compress each days worth of data\n\tdays.forEach(function(day) {\n\t\tvar compressed = this._compressDay(day, now, datapoints, distribution);\n\n\t\tusage = usage.concat(compressed);\n\t}.bind(this));\n\n\treturn usage;\n}\n\nProcessData.prototype._compressDay = function(day, now, datapoints, distribution) {\n\tif(day.length == 0) {\n\t\treturn day;\n\t}\n\n\tvar dayDifference = Math.floor((now - day[day.length - 1].x) / MILLISECONDS_IN_A_DAY);\n\n\tif(dayDifference > distribution.length) {\n\t\treturn [];\n\t}\n\n\tvar percent = distribution[dayDifference];\n\n\treturn this._compress(day, (datapoints/100) * percent);\n}\n\nProcessData.prototype._compress = function(dataSet, maxSamples) {\n\tvar sampleSize = Math.ceil(dataSet.length/maxSamples);\n\n\tvar output = [];\n\tvar offset = 0;\n\tvar data = 0;\n\tvar date = 0;\n\n\twhile(offset < dataSet.length) {\n\t\tvar processed = 0;\n\n\t\tfor(var i = 0; i < sampleSize; i++) {\n\t\t\tif(offset + i == dataSet.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// might at some point overflow MAX_INT here. won't that be fun.\n\t\t\tdate += dataSet[offset + i].x;\n\n\t\t\tdata += dataSet[offset + i].y;\n\n\t\t\tprocessed++;\n\t\t}\n\n\t\toffset += processed;\n\n\t\toutput.push({\n\t\t\tx: date / processed,\n\t\t\ty: data / processed\n\t\t});\n\n\t\tdata = 0;\n\t\tdate = 0;\n\t}\n\n\treturn output;\n}\n\nmodule.exports = ProcessData;"}